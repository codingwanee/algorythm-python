"""
* 병합 정렬 알고리즘 *

* 설명 *
주어진 리스트를 두 그룹으로 나누어 각기 정렬한 뒤, (이 때, 역시 병합정렬 방식으로 정렬 => 재귀함수 이용)
맨 앞의 값을 비교하여 더 작은 값을 병합배열에 순서대로 삽입
위 과정을 반복한 뒤 한 그룹의 정렬이 끝나면 나머지 그룹의 남은 값을 병합배열에 삽입

* 특징 *
재귀함수를 이용한 정렬 / O(nlog2n)
reduction, 즉 병렬처리가 가능하다. 병렬이 되게 쪼개서 처리가 가능하다는 뜻.
GPU 같은 멀티에서 쓰기 좋다. down-top 방식이다. (quick 정렬과 반대)
"""
###############################################################
# 병합 정렬 알고리즘 - 효율 따지지 않고 원리 이해를 위한 버전
###############################################################
def mg_sort(lst):
    n = len(lst)
    # 종료 조건: 정렬할 리스트의 자료 개수가 한 개 이하이면 종료
    if n <= 1:
        return lst

    # 그룹을 나누어 각각 병합 정렬을 호출하는 과정
    mid = n // 2            # 중간을 기준으로 두 그룹 나눔
    g1 = mg_sort(lst[:mid]) # 재귀 호출로 첫 번째 그룹 정렬
    g2 = mg_sort(lst[mid:]) # 재귀 호출로 두 번째 그룹 정렬

    # 두 그룹을 하나로 병합
    result = []
    while g1 and g2:
        if g1[0] < g2[0]:
            # g1 값이 더 작으면 그 값을 빼내어 결과로 추가
            result.append(g1.pop(0))
        else:
            # g2 값이 더 작으면 그 값을 빼내어 결과로 추가
            result.append(g2.pop(0))
    # 아직 남아 있는 자료들을 결과에 추가
    # g1과 g2 중 이미 빈 것은 while을 바로 지나감
    while g1:
        result.append(g1.pop(0))
    while g2:
        result.append(g2.pop(0))
    return result

###############################################################
# 일반적인 삽입 정렬 알고리즘
###############################################################
def merge_sort(lst):
    n = len(lst)
    # 종료 조건: 정렬할 리스트의 자료 개수가 한 개 이하
    if n <=1:
        return

    # 그룹을 나누어 각각 병합 정렬을 호출하는 과정
    mid = n // 2
    g1 = lst[:mid]
    g2 = lst[mid:]
    merge_sort(g1)  # 재귀 호출로 첫 번째 그룹을 정렬
    merge_sort(g2)  # 재귀 호출로 두 번째 그룹을 정렬

    # 두 그룹을 하나로 병합
    i1 = 0
    i2 = 0
    ia = 0

    while i1<len(g1) and i2<len(g2):
        if g1[i1] < g2[i2]:
            lst[ia] = g1[i1]
            i1 += 1
            ia += 1
        else:
            lst[ia] = g2[i2]
            i2 += 1
            ia += 1
    # 아직 남아 있는 자료들을 결과에 추가
    while i1 < len(g1):
        lst[ia] = g1[i1]
        i1 += 1
        ia += 1
    while i2 < len(g2):
        lst[ia] = g2[i2]
        i2 += 1
        ia += 1

lst = [6, 8, 3, 9, 10, 1, 2, 4, 7, 5]
merge_sort(lst)
print(lst)


